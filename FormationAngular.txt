J1 : 
Installation de nodeJS
Installation de yarn : npm install -g yarn

Creation d'un compte gitlab (nico.taroy@gmail.com)
Creation d'un fork du projet "https://gitlab.com/christopheGueroult/starter-angular-init" --> "https://gitlab.com/hshc/starter-angular-init.git"

Git doit être installé
Clonage en locale du projet : git clone https://gitlab.com/hshc/starter-angular-init.git

Installation du projet à partir des dépendences définies dans "packhage.json" :
dans la console :
	- cd C:\Users\Stagiaire\Documents\starter-angular-init\my-app
	- yarn install --> cette commande crée un dossier "node_modules" contenue dans le dossier "my-app"

Installation de angular / cli :
	- aller sur le site angular quick start "http://angular.io/guide/quickstart"
	- dans la console taper : yarn add global @angular/cli ou si cela ne fonctionne pas "npm install -g @angular/cli"
	- eventuellement relancer la console
	- ng -v
	- on peut à présent utiliser la commande "ng" pour créer un nouveau projet.

On va lancer le projet avec la commande cli "ng" de angular :
dans la console :
	- cd C:\Users\Stagiaire\Documents\starter-angular-init\my-app
	- ng serve --open (cette commande lance un navigateur avec la page de bienvenue du projet)

Etude des évolution ECMAScript 6 (2016) dans les .js (dossier es6/js)
Présentation de "http://reactivex.io/" avec RxJS
https://angularbayonne2.firebaseapp.com/#/items
Etude des "Observable" de RxJS

Debut du cours Angular :
WebComponent --> "http://developer.mozilla.org/fr/docs/Web/Web_components", 
cette techno permet d'importer des elements dans du html (custom elements standard HTML5) pilotés par du javaScript
Cette techno est possible grace au principe du shadow dom qui permet à chaque composant d'avoir son propre DOM. Cela
évite d'avoir à gérer les collisions d'espaces de noms au niveau de la page parente. On a donc un "DOM root" au niveau
de la page et un "shadow DOM" par web component.
On a donc pour chaque component 3 fichiers : 1 js (controler), 1 html (vue), 1 css. Angular fournit donc une liste de
décorator pour definir le comportement des components qu'il fournit.
https://angular.io/guide/quickstart

analyse du dossier my-app:
	e2e : fichier javascript de tests end 2 end
	protractor.conf.js : permet de faire les test
	.angular-cli.json : fichier de configuration d'angular
	.editorconfig : fichier de conf de l'éditeur
	.gitignore : fichier ignorés par git
	node_modules: fichiers générés par "yarn instal" il ne faut pas les versionner
	karma : permet d'executer les tests unitaires
	package.json : fichier généré automatiquement lors de la création du projet "ng new my-app", il permet de générer le dossier "node_module"
	README.md : fichier markdown pour l'explication github
	tsconfig.json : configuration TypeScript, utiliser uniquement par vscode, il n'est pas utiliser par angular lors de la compile
	src/tsconfig.app.json : est utilisé par le compilo au moment de la compilation
	tslint.json : configuration du linter pour la validation des regles de codage
	src/assets : contient les images et vidéos, les icones ...
	main.ts : premier fichier lu par angular, défini dans ".angular-cli.json"

compodoc / jsdoc

l'application est lancée comme suit :
	- .angular-cli.json --> main.ts
	- maint.ts --> définission du bootsrapping du premier module "AppModule"
	- app.module.ts --> impors des composents nécessaires et du premier component à charger "AppComponent"
	- selector app-root

le code TypeScript, ES6, ES7 ... est transpilé en ES5 qui vont se retrouver dans le dossier "build"
le transpiler est babel transpiler.

Les polyfills (polyfills.ts) permet d'émuler les nouvelles balises pour les navigateurs trop anciens.
Les polyfills sont générés en javaScript et envoyé au navigateur.


l'archi appli :

	un module "SharedModule" - avec des component tous réutilisables sans modif sur d'autres appli
	un module "HomeModule" - la home
	un module "CoreModule" - ce module contient les services tous chargés au démarage en singleton
	... tous les autre modules propre à notre web app sont chargés à la volée

	Le module principal "AppRoot" qui contient AppComponent, importe shared, home et core au démarrage.	




Les technique utilisées sont :
	- lazyloading
	- redus (eq. reactJS de ngrx, c'etait le premier), il permet d'utiliser le cache du navigateur en sauvegardant des snapshot de navigation des états de la page
	- ngrx (outil visuel de mesure accessible via npm)
	- service worker - très propice à la pwa (progressive web application)

Les plugins "Visual Code":
	angular essentials
	material icon theme
	angularDoc

Creation des modules : (cf. doc "angular.io")
	- "ng generate module shared" (ou "ng g module shared". Suffixe automatique en .module.ts)
		ng generate module shared
		create src/app/shared/shared.module.ts (190 bytes)
	- "ng g module home"
	- "ng g module core"
	- "ng g module page not found"


l'archi d'un module :
	- module.ts
	- folder "containers"
	- folder "components"
	- folder "services"
	- file   "interfaces"
	- folder "directives"
	- folder "enum"

Creation des components du module "home"
	- mkdir C:\Users\Stagiaire\Documents\starter-angular-init\my-app\src\app\home\components
	- cd components
	- "ng g component home"

Pour comprendre le fonctionnement du composant "http://angular.io/guide/lifecycle-hooks"

tests : jasmin / site : code craft

creation d'un composant de navigation :
	- mkdir C:\Users\Stagiaire\Documents\starter-angular-init\my-app\src\app\shared\components
	- cd components
	- "ng g component home"

Installation de bootstrap : (framework css)
	- http://getbootstrap.com
	- yarn add bootstrap (ou npm install bootstrap)
Installation de ng-bootsrap : (ré-ecriture pour angular avec type script)
	- http://ng-bootstrap.github.io/#/getting-started
	- 

plugin emmet installable sur tous les IDE
"angular material" ou "ng bootsrap"


notion de directives:

directive de structure : permet de manipuler le DOM



UTILISATION DE FIREBASE -- https://firebase.google.com/ --- pour mettre en place ConnectAPI et les Observables
https://github.com/angular/angularfire2/blob/master/docs/install-and-setup.md
yarn add firebase angularfire2 --save (a verifier dans package.json)





http://localhost:4200/items/liste
http://ninja-squad.fr/
https://stackoverflow.com/questions/990904/remove-accents-diacritics-in-a-string-in-javascript/37511463#37511463
https://console.firebase.google.com/project/angularnico/database/firestore/data~2Fcollection~2FdwXQP46QHERZgJrOwNDy
https://github.com/angular/angularfire2/blob/master/docs/firestore/collections.md
http://brianflove.com/2016/12/11/anguar-2-unsubscribe-observables/
https://angular.io/api/common/JsonPipe
https://getbootstrap.com/docs/4.0/components/card/#header-and-footer
https://ng-bootstrap.github.io/#/home
http://vertx.io/docs/vertx-rx/java/
http://reactivex.io/
https://gitlab.com/hshc/starter-angular-init
